# Транзакция - это несколько последовательных инструкций SQL, которые вместе образуют логическую единицу работы.
# Инструкции, входящие в транзакцию, обычно тесно связаны между собой и выполняют взаимосвязанные действия.

# ACID, используется для обозначения четырех характеристик транзакции

# - Atomic (Атомарность) - "Девиз" транзакции - или все, или ничего. Либо успешно выполняются все операции транзакции,
# либо не выполняется ни одна из них. Если выполнены лишь некоторые инструкции, то транзакция оказывается неуспешной,
# и в результате будет выполнен откат выполненных инструкций. Только когда все инструкции выполнены корректно,
# транзакция может рассматриваться как завершенная, а ее результаты фиксируются в базе данных.

# - Consistent (Целостность) - Транзакция должна переводить базу данных из одного согласованного состояния в другое.
# База данных должна быть в согласованном состоянии по окончании каждой транзакции, а это означает, что должны
# выполняться все правила и ограничения. Ни один пользователь не должен иметь доступ к данным, несогласованным из-за
# незавершенности транзакции.

# - Isolated (Изолированность) - Каждая транзакция должна выполняться сама по себе, без взаимодействия с другими
# транзакциями. Для этого ни одна транзакция не должна работать с изменениями, вносимыми другой транзакцией, пока та
# не будет завершена.

# - Durable (Постояноство) - По завершению транзакции все внесенные ею изменения должны быть сохранены. Данные должны
# быть в согласованном состоянии, даже если по окончании транзакции произойдет аппаратный или программный сбой. В ООП
# для этого свойства используется термин персистентность.


# Свойства транзакций:
# - Уровень изоляции. Определяет, насколько транзакция изолирована от действия других транзакций. Параметры (READ
# UNCOMMITTED, READ COMMITTED, REPEATABLE READ, SERIALIZABLE). По умолчанию SERIALIZABLE.
# - Уровень доступа. Определяет, может ли транзакция содержать инструкции, которые модифицируют базу данных
# (READ WRITE), или не может содержать таковые (READ ONLY). Уровень по умолчанию зависит от выбранного уровня изоляции,
# но если такой не указан, то по умолчанию используется уровень доступа READ WRITE.

# Когда две транзакции, A и B, выполняются параллельно, СУБД гарантирует, что результаты их выполнения будут точно
# такими же, как и в случае, если либо (а) вначале выполняется транзакция А, а затем транзакция B; либо (б) вначале
# выполняется транзакция B, а затем транзакция A.
# Данная концепция называется сериализацией транзакций. На практике это означает, что каждый пользователь может работать
# с базой данных так, как если бы не было других пользователей, работающих параллельно.

# Транзакции должны быть как можно короче.
# Используйте инструкцию COMMIT как можно раньше и как можно чаще.


# Блокировка
# Практически во всех ведущих СУБД для обработки параллельных транзакций применяется довольно сложный механизм блокировки.
# Когда транзакция A обращается к базе данных, СУБД автоматически блокирует все части базы данных, в которых транзакция
# осуществляет выборку или изменение. Транзакция B выполняется параллельно, и СУБД также блокирует те части базы данных,
# к которым она обращается. Если транзакция B обращается к той части базы данных, которая заблокирована транзакцией A,
# то СУБД приостанавливает выполнение транзакции B, заставляя ее ждать до тех пор, пока данные не будут разблокированы.
# СУБД снимает блокировку, вызванную транзакцией A, только после того, как в этой транзакции встретится инструкция
# COMMIT или ROLLBACK.



SELECT NOW(),
       CURRENT_TIME(),
       CURRENT_DATE(),
       VERSION(),
       DATABASE();


# В большинстве СУБД для повышения степени параллельности доступа несколько пользователей к одной базе данных
# используются блокировки различных типов:
# - Блокировка с обеспечением совместного доступа, или блокировка без монополизации (shared lock)
# - Монопольная, или исключающая блокировка (exclusive lock)

# Усовершенствованные методы блокировки
# - Явная блокировка. Программа может явно заблокировать целую таблицу или другую часть базы данных, если планирует
# многократно обращаться к ней.
# - Уровни изоляции. Можно проинформировать СУБД о том, что некоторая программа не будет повторно извлекать данные во
# время транзакции, позволяя тем самым СУБД снять блокировку еще до окончания транзакции.
# - Параметры блокировки. Администратор базы данных может вручную установить размер блокируемого участка базы данных и
# другие параметры блокировки.

